<?xml version='1.0' encoding='utf-8'?>
<!-- -*- DocBook -*- -->
<chapter id="s-ssh"><title>Servidor ssh</title>
<para>
Este capítulo documenta a instalação, configuração e personalização do servidor
de shell seguro <command>sshd</command>, além de explicar as vantagens da
utilização dos serviços criptográficos.  A utilização do programa cliente
<command>ssh</command> também é explicada, além de utilitários usados para
geração de chaves pública/privada para o <command>ssh</command> (autenticação
RSA/DAS - o que é, vantagens), cópia de arquivos e métodos de autenticação
usando o método de chave pública/privada RSA.
</para>
<para>
Ambas as versões 1 e 2 do ssh são documentadas neste capítulo.  Opções
específicas do protocolo 1 ou 2 do ssh serão destacadas.
</para>
<section id="s-ssh-intro"><title>Introdução</title>
<para>
O serviço de <command>ssh</command> permite fazer o acesso remoto ao console de
sua máquina, em outras palavras, você poderá acessar sua máquina como se
estivesse conectado localmente ao seu console (substituindo o
<command>rlogin</command> e <command>rsh</command>).  A principal diferença com
relação ao serviço <command>telnet</command> padrão, <command>rlogin</command>
e <command>rsh</command> é que toda a comunicação entre cliente/servidor é
feita de forma encriptada usando chaves públicas/privadas RSA para criptografia
garantindo uma transferência segura de dados.
</para>
<para>
A velocidade do console remoto conectado via Internet é excelente (melhor que a
obtida pelo <command>telnet</command> e serviços r*) dando a impressão de uma
conexão em tempo real (mesmo em links discados de 9.600 KB/s), a compactação
dos dados também pode ser ativada para elevar ainda mais a velocidade entre
cliente-servidor ssh.  Além do serviço de acesso remoto, o
<command>scp</command> possibilita a transferência/recepção segura de arquivos
(substituindo o <command>rcp</command>).
</para>
<para>
Em conexões sem criptografia (rsh, rlogin) os dados trafegam de forma
desprotegida e caso exista algum sniffer instalado em sua rota com a máquina
destino, todo o que fizer poderá ser capturado (incluindo senhas).
</para>
<section id="s-ssh-versao"><title>Versão</title>
<para>
É assumido que esteja usando a versão 2.0 do <command>ssh</command>.  As
explicações contidas aqui podem funcionar para versões posteriores, mas é
recomendável que leia a documentação sobre modificações no programa (changelog)
em busca de mudanças que alterem o sentido das explicações fornecidas aqui.
</para>
</section>

<section id="s-ssh-historia"><title>História</title>
<para>
O <command>openSSH</command> (explicado neste capítulo) é baseado na última
versão livre do implementação de Tatu Ylonen com todos os algoritmos
patenteados (para bibliotecas externas) removidos, todos as falhas de segurança
corrigidas, novas características e muitas outras melhorias.  O openSSH foi
criado por Aaron Campbell, Bob Beck, Markus Friedl, Niels Provos, Theo de Raadt
e Dug Song.
</para>
</section>

<section id="s-ssh-contribuindo"><title>Contribuindo</title>
<para>
A Home page principal é <ulink
url="http://www.unixuser.org/~haruyama/security/openssh/index.html">http://www.unixuser.org/~haruyama/security/openssh/index.html</ulink>.
Falhas, correções e sugestões podem ser enviadas para a lista de discussão
<email>openssh-unix-dev@mindrot.org</email> (aberta a postagens de usuários não
inscritos).
</para>
</section>

<section id="s-ssh-caracteristicas"><title>Características</title>
<para>
Abaixo as principais características do serviço <command>ssh</command>
(<command>Openssh</command>).
</para>
<itemizedlist>
<listitem>
<para>
Conexão de dados criptografada entre cliente/servidor.
</para>
</listitem>
<listitem>
<para>
Cópia de arquivos usando conexão criptografada.
</para>
</listitem>
<listitem>
<para>
Suporte a ftp criptografado (sftp).
</para>
</listitem>
<listitem>
<para>
Suporte a compactação de dados entre cliente/servidor.
</para>
</listitem>
<listitem>
<para>
Controle de acesso das interfaces servidas pelo servidor
<command>ssh</command>.
</para>
</listitem>
<listitem>
<para>
Suporte a controle de acesso tcp wrappers.
</para>
</listitem>
<listitem>
<para>
Autenticação usando um par de chaves pública/privada RSA ou DSA.
</para>
</listitem>
<listitem>
<para>
Algoritmo de criptografia livre de patentes.
</para>
</listitem>
<listitem>
<para>
Suporte a PAM.
</para>
</listitem>
<listitem>
<para>
Suporte a caracteres ANSI (cores e códigos de escape especiais no console).
</para>
</listitem>
</itemizedlist>
</section>

<section id="s-ssh-ficha"><title>Ficha técnica</title>
<para>
Pacote: <systemitem role="package">ssh</systemitem>
</para>
<para>
Utilitários:
</para>
<itemizedlist>
<listitem>
<para>
<literal>ssh</literal> - Cliente ssh (console remoto).
</para>
</listitem>
<listitem>
<para>
<literal>slogin</literal> - Link simbólico para o programa
<command>ssh</command>.
</para>
</listitem>
<listitem>
<para>
<literal>sshd</literal> - Servidor de shell seguro ssh.
</para>
</listitem>
<listitem>
<para>
<literal>scp</literal> - Programa para transferência de arquivos entre
cliente/servidor
</para>
</listitem>
<listitem>
<para>
<literal>ssh-keygen</literal> - Gera chaves de autenticação para o ssh
</para>
</listitem>
<listitem>
<para>
<literal>sftp</literal> - Cliente ftp com suporte a comunicação segura.
</para>
</listitem>
<listitem>
<para>
<literal>sftp-server</literal> - Servidor ftp com suporte a comunicação segura.
</para>
</listitem>
<listitem>
<para>
<literal>ssh-add</literal> - Adiciona chaves de autenticação DSA ou RSA ao
programa de autenticação.
</para>
</listitem>
<listitem>
<para>
<literal>ssh-agent</literal> - Agente de autenticação, sua função é armazenar a
chave privada para autenticação via chave pública (DSA ou RSA).
</para>
</listitem>
<listitem>
<para>
<literal>ssh-keyscan</literal> - Scaneia por chaves públicas de autenticação de
hosts especificados.  O principal objetivo é ajudar na construção do arquivo
local <filename>know_hosts</filename>.
</para>
</listitem>
<listitem>
<para>
<literal>ssh-copy-id</literal> - Usado para instalação do arquivo
<filename>identity.pub</filename> em uma máquina remota.
</para>
</listitem>
</itemizedlist>
<para>
Arquivos de configuração:
</para>
<itemizedlist>
<listitem>
<para>
<filename>/etc/ssh/sshd_config</filename> - Arquivo de configuração do servidor
ssh.
</para>
</listitem>
<listitem>
<para>
<filename>/etc/ssh/ssh_config</filename> - Arquivo de configuração do cliente
ssh.
</para>
</listitem>
<listitem>
<para>
<filename>~/.ssh/config</filename> - Arquivo de configuração pessoal do cliente
ssh.
</para>
</listitem>
</itemizedlist>
</section>

<section id="s-ssh-hwreq"><title>Requerimentos de Hardware</title>
<para>
É recomendado no mínimo 6MB de memória RAM para a execução do serviço
<command>ssh</command> mais o kernel do <command>Linux</command>.  Este limite
deve ser redimensionado para servidores de acesso dedicado, uma quantidade de
64MB deve ser confortável para centenas de usuários conectados simultaneamente
(o que raramente acontece).
</para>
<para>
Veja também <xref linkend="d-restr"/> para configuração de restrições usando
PAM.  O <command>ssh</command> que acompanha a distribuição
<command>Debian</command> vem com o suporte a tcp wrappers compilado por
padrão.
</para>
</section>

<section id="s-ssh-logs"><title>Arquivos de log criados pelo servidor ssh</title>
<para>
Detalhes sobre a execução do servidor <command>sshd</command> (como inicio,
autenticação e término) são enviadas ao <command>syslog</command> do sistema.
A <emphasis>prioridade</emphasis> e <emphasis>nível</emphasis> são definidos no
arquivo de configuração <filename>/etc/ssh/sshd_config</filename> (veja <xref
linkend="s-ssh-server-sshd-config"/>).
</para>
</section>

<section id="s-ssh-install"><title>Instalação do servidor openSSH</title>
<para>
<literal>apt-get install ssh</literal>.
</para>
<para>
Por padrão o servidor <command>sshd</command> é instalado como daemon, também é
possível executa-lo via <command>inetd</command> mas isto não é aconselhável
porque o servidor gera uma chave aleatória de seção toda vez que é iniciado,
isto podendo levar vários segundos (quando é usada a versão 1 do protocolo ssh,
veja <xref linkend="s-ssh-server-protodiff"/>).
</para>
</section>

<section id="s-ssh-rodando"><title>Iniciando o servidor/reiniciando/recarregando a configuração</title>
<para>
O arquivo que controla o funcionamento do daemon do <command>ssh</command> é
controlado pelo arquivo <filename>/etc/init.d/ssh</filename>.
</para>
<para>
A execução do <command>ssh</command> através de <command>inetd</command> é
automática quando é feita uma requisição para a porta <emphasis>22</emphasis>.
</para>
</section>

<section id="s-ssh-opcoescmd"><title>Opções de linha de comando</title>
<para>
Opções de linha de comando do servidor <command>sshd</command>:
</para>
<itemizedlist>
<listitem>
<para>
<literal>-b bits</literal> - Especifica o número de bits da chave do servidor
(768 por padrão).
</para>
</listitem>
<listitem>
<para>
<literal>-d</literal> - Modo de depuração - O servidor envia detalhes sobre seu
funcionamento aos logs do sistema e não é executado em segundo plano.  Ele
também responderá conexões pelo mesmo processo.  Podem ser usadas no máximo 3
opções <emphasis>-d</emphasis> para aumentar os detalhes de depuração.
</para>
</listitem>
<listitem>
<para>
<literal>-f arquivo_configuração</literal> Indica um arquivo de configuração
alternativo (por padrão é usado <filename>/etc/ssh/sshd_config</filename>).  O
<command>ssh</command> pode ser configurado através de opções de linha de
comando mas requer um arquivo de configuração para ser executado.  Opções de
linha de comando substituem as especificadas no arquivo de configuração.
</para>
</listitem>
<listitem>
<para>
<literal>-g segundos</literal> - Especifica o tempo máximo para a digitação de
senha de acesso.  Após o tempo especificado o servidor encerra a conexão.  O
valor padrão é 600 segundos e 0 desativa este recurso.
</para>
</listitem>
<listitem>
<para>
<literal>-h arquivo_chave</literal> - Diz qual arquivo contém a chave privada
local.  O padrão é <filename>/etc/ssh/ssh_host_key</filename> e somente o
usuário <literal>root</literal> deve ter permissões de leitura neste arquivo.
Será necessário especificar esta opção caso o <command>sshd</command> não
esteja sendo executado como usuário <literal>root</literal>.
</para>
<para>
É possível ter múltiplos arquivos de chaves para os protocolos 1 e 2 do ssh.
</para>
</listitem>
<listitem>
<para>
<literal>-i</literal> - Indica que o servidor <command>sshd</command> será
executado pelo <command>inetd</command>.  Isto não é aconselhável porque o
servidor gerará a chave aleatória de seção toda vez que for iniciado e isto
pode levar alguns segundos.  Esta opção pode se tornar viável com o uso do
protocolo 2 ou criando chaves pequenas como 512 bytes (no ssh 1), mas a
segurança criptográfica também será diminuída.  Veja as diferenças entre os
dois protocolos em <xref linkend="s-ssh-server-protodiff"/>.
</para>
</listitem>
<listitem>
<para>
<literal>-k segundos</literal> - Especifica a freqüência da geração de novas
chaves do daemon <command>sshd</command>.  O valor padrão é 3600 segundos e 0
desativa este recurso.
</para>
<para>
<emphasis role="strong">ATENÇÃO:</emphasis> NÃO desative este recurso!!!  Esta
opção traz a segurança que uma nova chave gerada de servidor será gerada
constantemente (esta chave é enviada junto com a chave pública quando o cliente
conecta e fica residente na memória volátil), assim mesmo que um cracker
consiga obtê-la interceptando as conexões, será praticamente impossível tentar
qualquer coisa.  Valores menores tendem a aumentar ainda mais a segurança.
</para>
</listitem>
<listitem>
<para>
<literal>-p porta</literal> - Especifica a porta que o daemon
<command>sshd</command> atenderá as requisições.  Por padrão é usada a porta
22.
</para>
</listitem>
<listitem>
<para>
<literal>-q</literal> - Nenhuma mensagem será enviada ao
<command>syslog</command> do sistema.
</para>
</listitem>
<listitem>
<para>
<literal>-u tam</literal> - Especifica o tamanho do campo de nome do computador
que será armazenado no arquivo <filename>utmp</filename>.  A opção
<emphasis>u0</emphasis> faz somente endereços IP serem gravados.
</para>
</listitem>
<listitem>
<para>
<literal>-D</literal> - Quando usada não faz o <command>sshd</command> iniciar
em segundo plano.
</para>
</listitem>
<listitem>
<para>
<literal>-V versão_cliente</literal> - Assume que o cliente possui a versão ssh
especificada (1 ou 2) e não faz os testes de identificação de protocolo.
</para>
</listitem>
<listitem>
<para>
<literal>-4</literal> - Força o uso do protocolo IP tradicional (IPv4).
</para>
</listitem>
<listitem>
<para>
<literal>-6</literal> - Força o uso da nova geração do protocolo IP (IPv6).
</para>
</listitem>
</itemizedlist>
<para>
A maioria das opções são realmente úteis para modificar o comportamento do
servidor <command>ssh</command> sem mexer em seu arquivo de configuração (para
fins de testes) ou para executar um servidor <command>ssh</command> pessoal,
que deverá ter arquivos de configuração específicos.
</para>
</section>

</section>

<section id="s-ssh-cliente"><title>Usando aplicativos clientes</title>
<para>
Esta seção explicará o uso dos utilitários <command>ssh</command>,
<command>scp</command> e <command>sftp</command>.
</para>
<section id="s-ssh-cliente-ssh"><title>ssh</title>
<para>
Esta é a ferramenta usada para seções de console remotos.  O arquivo de
configuração de usuários é <filename>~/.ssh/config</filename> e o arquivo
global <filename>/etc/ssh/ssh_config</filename>.  Para conectar a um servidor
ssh remoto:
</para>
<screen>
ssh usuario@ip/nome_do_servidor_ssh
</screen>
<para>
Caso o nome do usuário seja omitido, seu login atual do sistema será usado.  O
uso da opção <emphasis>-C</emphasis> é recomendado para ativar o modo de
compactação dos dados (útil em conexões lentas).  A opção <emphasis>-l
usuário</emphasis> pode ser usada para alterar a identificação de usuário
(quando não é usada, o login local é usado como nome de usuário remoto).  Uma
porta alternativa pode ser especificada usando a opção <emphasis>-p
porta</emphasis> (a 22 é usada por padrão).
</para>
<para>
Na primeira conexão, a chave pública do servidor remoto será gravada em
<filename>~/.ssh/know_hosts</filename> ou
<filename>~/.ssh/know_hosts2</filename> (dependendo da versão do servidor
<command>ssh</command> remoto, veja <xref linkend="s-ssh-server-protodiff"/>),
e verificada a cada conexão como checagem de segurança para se certificar que o
servidor não foi alvo de qualquer ataque ou modificação não autorizada das
chaves.  Por padrão, o cliente utilizará o protocolo ssh versão 1, a opção
<emphasis>-2</emphasis> permite usar o protocolo versão 2.
</para>
<para>
Variáveis de ambiente personalizadas para o <command>ssh</command> poderão ser
definidas no arquivo <filename>~/.ssh/environment</filename>.  Comandos que
serão executados somente na conexão ssh em <filename>~/.ssh/rc</filename> e
<filename>/etc/ssh/sshrc</filename> caso contrário será executado o
<command>xauth</command> por padrão.
</para>
<para>
<emphasis role="strong">OBS:</emphasis> Para utilizar autenticação
Rhosts/Rhosts+RSA (arquivos
<filename>~/.rhosts</filename>/<filename>~/.shosts</filename>) o programa
<command>ssh</command> deverá ter permissões SUID root e conectará usando
portas baixas (menores que 1024).
</para>
<screen>
Exemplos:
# Conecta-se ao servidor remoto usando o login do usuário atual
ssh ftp.sshserver.org

# Conecta-se ao servidor remoto usando o login john (via ssh versão 2)
ssh -2 ftp.sshserver.org -l john

# Conecta-se ao servidor remoto usando compactação e o login john
ssh ftp.sshserver.org -C -l john

# Semelhante ao exemplo acima, usando o formato "login@ip"
ssh john@ftp.sshserver.org -C

# Conecta-se ao servidor remoto usando compactação, o login john, 
# ativa o redirecionamento do agente de autenticação (-A) e redirecionamento 
# de conexões X11 (-X). Veja a próxima seção para entender como o 
# suporte a redirecionamento de conexões do X funciona. 
ssh ftp.sshserver.org -C -A -X -l john
</screen>
<section id="s-ssh-cliente-ssh-Xforward"><title>Redirecionamento de conexões do X</title>
<para>
O redirecionamento de conexões do X Window poderá ser habilitado em
<filename>~/.ssh/config</filename> ou <filename>/etc/ssh/ssh_config</filename>
ou usando as opções <emphasis>-A -X</emphasis> na linha de comando do
<command>ssh</command> (as opções <emphasis>-a</emphasis> e
<emphasis>-x</emphasis> desativam as opções acima respectivamente).  Uma
variável <replaceable>$DISPLAY</replaceable> é criada automaticamente para
fazer o redirecionamento ao servidor X local.
</para>
<para>
Ao executar um aplicativo remoto, a conexão é redirecionada a um DISPLAY proxy
criado pelo ssh (a partir de <literal>:10</literal>, por padrão) que faz a
conexão com o display real do X (:0), ou seja, ele pulará os métodos de
autenticação <command>xhost</command> e cookies.  Por medidas de segurança é
recomendável habilitar o redirecionamento individualmente somente se você
confia no administrador do sistema remoto.
</para>
<screen>
# Exemplo de configuração do ssh_config

# Permite Redirecionamento de conexões para o próprio computador (nomes de 
# máquinas podem ser especificadas). 
Host 127.0.0.1
    ForwardAgent yes
    ForwardX11 yes

# Opções específicas do cliente para conexões realizadas a 192.168.1.4 usando 
# somente o protocolo 2
Host 192.168.1.4
   # As 2 linhas abaixo ativam o redirecionamento de conexões do X
   ForwardAgent yes
   ForwardX11 yes
   PasswordAuthentication yes
   Port 22
   Protocol 2
   Cipher blowfish

# Opções específicas do cliente para conexões realizadas a 192.168.1.5 usando 
# somente o protocolo 1
Host 192.168.1.5
   # As 2 linhas abaixo desativam o redirecionamento de conexões do X
   ForwardAgent no
   ForwardX11 no
   PasswordAuthentication yes
   Port 22
   Protocol 1
   Cipher blowfish

#   CheckHostIP yes
#   RhostsAuthentication no
#   RhostsRSAAuthentication yes
#   RSAAuthentication yes
#   FallBackToRsh no
#   UseRsh no
#   BatchMode no
#   StrictHostKeyChecking yes
#   IdentityFile ~/.ssh/identity
#   IdentityFile ~/.ssh/id_dsa
#   IdentityFile ~/.ssh/id_rsa1
#   IdentityFile ~/.ssh/id_rsa2
#   EscapeChar ~
</screen>
</section>

<section id="s-ssh-cliente-ssh-win"><title>Cliente ssh para Windows</title>
<para>
O <command>putty</command> é um cliente ssh Win32 que possui suporte aos
protocolos versão 1 e 2 do ssh, aceita compactação além de funcionar também
como cliente <command>telnet</command>.  Seu tamanho é pequeno, apenas um
executável e requer 220KB de espaço em disco.  Ele pode ser baixado de <ulink
url="http://www.chiark.greenend.org.uk/~sgtatham/putty/">http://www.chiark.greenend.org.uk/~sgtatham/putty/</ulink>.
</para>
<para>
Outra alternativa é o <command>MindTerm</command>, este é baseado em Java e
pode inclusive ser executado como um applet em uma página web.  Este programa é
encontrado em <ulink
url="http://www.mindbright.se/mindterm/">http://www.mindbright.se/mindterm/</ulink>.
</para>
</section>

</section>

<section id="s-ssh-cliente-scp"><title>scp</title>
<para>
Permite a cópia de arquivos entre o cliente/servidor ssh.  A sintaxe usada por
este comando é a seguinte:
</para>
<para>
<literal>scp [<emphasis>origem</emphasis>]
[<emphasis>destino</emphasis>]</literal>
</para>
<para>
Os parâmetros de <emphasis>origem</emphasis> e <emphasis>destino</emphasis> são
semelhantes ao do comando <command>cp</command> mas possui um formato especial
quando é especificado uma máquina remota:
</para>
<itemizedlist>
<listitem>
<para>
<literal>Um caminho padrão</literal> - Quando for especificado um arquivo
local.  Por exemplo: <filename>/usr/src/arquivo.tar.gz</filename>.
</para>
</listitem>
<listitem>
<para>
<literal>usuario@host_remoto:/diretório/arquivo</literal> - Quando desejar
copiar o arquivo de/para um servidor remoto usando sua conta de usuário.  Por
exemplo: <literal>gleydson@ftp.debian.org:~/arqs</literal>.
</para>
</listitem>
</itemizedlist>
<para>
A opção <emphasis>-C</emphasis> é recomendável para aumentar a taxa de
transferência de dados usando compactação.  Caso a porta remota do servidor
<command>sshd</command> seja diferente de 22, a opção <emphasis>-P
porta</emphasis> deverá ser especificada (é "P" maiúscula mesmo, pois a
<emphasis>-p</emphasis> é usada para preservar permissões/data/horas dos
arquivos transferidos).
</para>
<screen>
Exemplos:
# Para copiar um arquivo local chamado /pub/teste/script.sh para 
# meu diretório pessoal em ftp.sshserver.org
scp -C /pub/teste/script.sh gleydson@ftp.sshserver.org:~/

# Para fazer a operação inversa a acima (copiando do servidor remoto para o local) 
# é só inverter os parâmetros origem/destino: 
scp -C gleydson@ftp.sshserver.org:~/script.sh /pub/teste

# Para copiar o arquivo local chamado /pub/teste/script.sh para 
# o diretório /scripts dentro do meu diretório pessoal em ftp.sshserver.org 
# com o nome teste.sh
scp -C /pub/teste/script.sh gleydson@ftp.sshserver.org:~/scripts/teste.sh

# O exemplo abaixo faz a transferência de arquivos entre 2 computadores remotos: 
# O arquivo teste.sh é lido do servidor server1.ssh.org e copiado para 
# server2.ssh.org (ambos usando o login gleydson)
scp -C gleydson@server1.ssh.org:~/teste.sh gleydson@server2.ssh.org:~/
</screen>
<section id="s-ssh-cliente-scp-win"><title>Cliente scp para Windows</title>
<para>
O <command>pscp</command> faz a tarefa equivalente ao <command>scp</command> no
windows, e pode ser baixado de <ulink
url="http://www.chiark.greenend.org.uk/~sgtatham/putty/">http://www.chiark.greenend.org.uk/~sgtatham/putty/</ulink>.
</para>
</section>

</section>

<section id="s-ssh-cliente-sftp"><title>sftp</title>
<para>
Permite realizar transferência de arquivos seguras através do protocolo ssh.  A
conexão e transferências são realizadas através da porta 22 (ainda não é
possível modificar a porta padrão).  A sintaxe para uso deste comando é a
seguinte:
</para>
<para>
<literal>sftp usuario@host_remoto</literal>
</para>
<para>
Compactação pode ser especificada através da opção <emphasis>-C</emphasis>.  Um
arquivo contendo os comandos usados na seção <command>sftp</command> poderá se
especificado através da opção <emphasis>-b arquivo</emphasis> para automatizar
tarefas.
</para>
<para>
<emphasis role="strong">OBS1:</emphasis> Para desativar o servidor
<command>sftp</command>, remova a linha <literal>SubSystem sftp
/usr/lib/sftp-server</literal> (que inicializa o sub-sistema ftp) do arquivo
<filename>/etc/ssh/sshd_config</filename> e reinicie o servidor
<command>sshd</command>.
</para>
<para>
<emphasis role="strong">OBS2:</emphasis> O suporte ao programa
<command>sftp</command> somente está disponível ao protocolo ssh versão 2 e
superiores.
</para>
<para>
<emphasis role="strong">OBS3:</emphasis> Algumas opções comuns do cliente
<command>ftp</command> padrão (como <emphasis>mget</emphasis>) ainda não estão
disponíveis ao <command>sftp</command>.  Veja a página de manual para detalhe
sobre as opções disponíveis.
</para>
</section>

</section>

<section id="s-ssh-server"><title>Servidor ssh</title>
<section id="s-ssh-server-sshd"><title>sshd</title>
<para>
Este é o daemon de controle da conexão encriptada via protocolo ssh,
transferência de arquivos e shell interativo.  As opções de linha de comando
estão disponíveis em <xref linkend="s-ssh-opcoescmd"/>.  Seu arquivo de
configuração principal é <filename>/etc/ssh/sshd_config</filename>, um exemplo
e descrição das opções deste arquivo é encontrada em <xref
linkend="s-ssh-server-sshd-config"/>.
</para>
<para>
<emphasis role="strong">OBS1:</emphasis> É recomendável que o arquivo
<filename>/etc/ssh/sshd_config</filename> seja lido somente pelo dono/grupo,
por conter detalhes de acesso de usuários, grupos e intervalo entre a geração
de chave de seção.
</para>
<para>
<emphasis role="strong">OBS2:</emphasis> Se estiver ocorrendo falhas no acesso
ao servidor ssh, verifique as permissões nos arquivos
<filename>/etc/hosts.allow</filename> e <filename>/etc/hosts.deny</filename> (o
nome do serviço é <command>sshd</command>).  Mesmo operando como daemon, o
servidor utiliza estes arquivos para fazer um controle de acesso adicional.
</para>
</section>

<section id="s-ssh-acesso"><title>Controle de acesso</title>
<para>
É definido pelas opções <literal>ListenAddress</literal>,
<literal>AllowUsers</literal>, <literal>DenyUsers</literal>,
<literal>AllowGroups</literal>, <literal>DenyGroups</literal> e
<literal>PermitRootLogin</literal> do arquivo de configuração
<filename>sshd_config</filename> (veja <xref
linkend="s-ssh-server-sshd-config"/>) e via tcpd (arquivos
<filename>hosts.allow</filename> e <filename>hosts.deny</filename>).  Veja
<xref linkend="rede-seg-tcpd"/>.
</para>
</section>

<section id="s-ssh-server-rsaauth"><title>Usando autenticação RSA/DSA - chave pública/privada</title>
<para>
Este método de autenticação utiliza o par de chaves pública (que será
distribuído nas máquinas que você conecta) e outra privada (que ficará em seu
diretório pessoal) para autenticação.  A encriptação e decriptação são feitas
usando chaves separadas e não é possível conseguir a chave de decriptação
usando a chave de encriptação.  É possível inclusive gerar uma chave sem senha
para efetuar o logon em um sistema ou execução de comandos remotos (este
esquema é um pouco mais seguro que os arquivos <filename>~/.rhosts</filename> e
<filename>~/.shosts</filename>).
</para>
<para>
Siga os seguintes passos para se autenticar usando RSA 1 - usada na versão 1 do
<command>ssh</command>:
</para>
<orderedlist numeration="arabic">
<listitem>
<para>
Gere um par de chaves pública/privada usando o comando:
</para>
<screen>
ssh-keygen
</screen>
<para>
Um par de chaves RSA versão 1 será gerado com o tamanho de 1024 bits por
padrão, garantindo uma boa segurança/performance, e salvas no diretório
<filename>~/.ssh</filename> com o nome <filename>identity</filename> e
<filename>identity.pub</filename>.  Para alterar o tamanho da chave use a opção
<emphasis>-b tamanho</emphasis>.  Depois de gerar a chave, o
<command>ssh-keygen</command> pedirá uma <literal>frase-senha</literal> (é
recomendável ter um tamanho maior que 10 caracteres e podem ser incluídos
espaços).  Se não quiser digitar uma senha para acesso ao sistema remoto, tecle
&lt;Enter&gt; quando perguntado.  Mude as permissões do diretório
<filename>~/.ssh</filename> para 750.
</para>
<para>
A opção <emphasis>-f</emphasis> especifica o diretório e nome das chaves.  A
chave pública terá a extensão <filename>.pub</filename> adicionada ao nome
especificado.
</para>
<para>
<emphasis role="strong">ATENÇÃO</emphasis> Nunca distribua sua chave privada,
nem armazene-a em servidores de acesso públicos ou outros métodos que permitem
outros terem acesso a ela.  Se precisar de uma cópia de segurança, faça em
disquetes e guarde-a em um lugar seguro.
</para>
</listitem>
<listitem>
<para>
Instale a chave pública no servidor remoto que deseja se conectar, por exemplo,
<filename>www.sshserver.org</filename>:
</para>
<screen>
ssh-copy-id -i ~/.ssh/identity gleydson@www.servidorssh.org
</screen>
<para>
A função do utilitário acima é entrar no sistema remoto e adicionar a chave
pública local <filename>~/.ssh/identity.pub</filename> no arquivo
<filename>/home/gleydson/.ssh/authorized_keys</filename> do sistema remoto
<filename>www.sshserver.org</filename>.  O mesmo processo poderá ser feito
manualmente usando os métodos tradicionais
(<command>ssh</command>/<command>scp</command>).  Caso o arquivo remoto
<filename>/home/gleydson/.ssh/authorized_keys</filename> não existe, ele será
criado.  Seu formato é idêntico ao <filename>~/.ssh/know_hosts</filename> e
contém uma chave pública por linha.
</para>
</listitem>
<listitem>
<para>
Agora utilize o <command>ssh</command> para entrar no sistema remoto usando o
método de chave pública/privada.  Entre com a senha que usou para gerar o par
de chaves público/privado (ele entrará diretamente caso não tenha digitado uma
senha).
</para>
</listitem>
</orderedlist>
<para>
Para autenticar em uma versão 2 do <command>ssh</command> (usando chave RSA 2
ou DSA):
</para>
<orderedlist numeration="arabic">
<listitem>
<para>
Gere um par de chaves pública/privada usando o comando:
</para>
<screen>
ssh-keygen -t rsa -f ~/.ssh/id_rsa

ou 

ssh-keygen -t dsa -f ~/.ssh/id_rsa
</screen>
<para>
Um par de chaves RSA 2/DSA será gerado.  Para alterar o tamanho da chave use a
opção <emphasis>-b tamanho</emphasis>.  Depois de gerar a chave, o
<command>ssh-keygen</command> pedirá uma <literal>frase-senha</literal> (é
recomendável ter um tamanho maior que 10 caracteres e podem ser incluídos
espaços).  Se não quiser digitar uma senha para acesso ao sistema remoto, tecle
&lt;Enter&gt; quando perguntado.  Mude as permissões do diretório
<filename>~/.ssh</filename> para 750.
</para>
<para>
<emphasis role="strong">ATENÇÃO</emphasis> Nunca distribua sua chave privada,
nem armazene-a em servidores de acesso públicos ou outros métodos que permitem
outros terem acesso a ela.  Se precisar de uma cópia de segurança, faça em
disquetes e guarde-a em um lugar seguro.
</para>
</listitem>
<listitem>
<para>
Instale a chave pública no servidor remoto que deseja se conectar copiando o
arquivo com:
</para>
<screen>
scp ~/.ssh/id_rsa.pub usuario@servidorremoto:~/.ssh/authorized_keys2
ou
scp ~/.ssh/id_dsa.pub usuario@servidorremoto:~/.ssh/authorized_keys2
(caso tenha gerado a chave com a opção -t dsa)
</screen>
<para>
Caso o arquivo remoto <filename>/home/gleydson/.ssh/authorized_keys2</filename>
não existe, ele será criado.  Seu formato é idêntico ao
<filename>~/.ssh/know_hosts2</filename> e contém uma chave pública por linha.
</para>
</listitem>
<listitem>
<para>
Agora utilize o <command>ssh</command> para entrar no sistema remoto usando o
método de chave pública/privada.  Entre com a senha que usou para gerar o par
de chaves público/privado (ele entrará diretamente caso não tenha digitado uma
senha).
</para>
</listitem>
</orderedlist>
<para>
<emphasis role="strong">OBS:</emphasis> Deverá ser levado em consideração a
possibilidade de acesso físico ao seu diretório pessoal, qualquer um que tenha
posse de sua chave privada poderá ter acesso ao sistema remoto.  O tipo de
chave criada por padrão é a <emphasis>rsa1</emphasis> (compatível com as
versões 1 e 2 do ssh).  A opção <emphasis>-t [chave]</emphasis> poderá ser
usada (ao gerar a chave) para selecionar o método de criptografia:
</para>
<itemizedlist>
<listitem>
<para>
<literal>rsa1</literal> - Cria uma chave rsa compatível com a versão 1 e 2 do
<command>ssh</command> (esta é a padrão).
</para>
</listitem>
<listitem>
<para>
<emphasis>rsa</emphasis> - Cria uma chave rsa compatível somente com a versão 2
do <command>ssh</command>.
</para>
</listitem>
<listitem>
<para>
<emphasis>dsa</emphasis> - Cria uma chave dsa compatível somente com a versão 2
do <command>ssh</command>.
</para>
</listitem>
</itemizedlist>
<para>
Para trocar a senha utilize o comando: <literal>ssh-keygen -p -t tipo_chave -f
~/.ssh/identity</literal> - será pedida sua senha antiga e a nova senha (no
mesmo estilo do <command>passwd</command>).  Opcionalmente você pode utilizar a
sintaxe: <literal>ssh-keygen -p -f ~/.ssh/identity -P senha_antiga -N
senha_nova</literal>, que troca a senha em um único comando (útil para ser
usado em scripts junto com a opção <emphasis>-q</emphasis> para evitar a
exibição de mensagens de saída do <command>ssh-keygen</command>).
</para>
</section>

<section id="s-ssh-server-cmdkey"><title>Execução de comandos específicos usando chaves</title>
<para>
Com o uso de chaves também é possível o uso do <command>ssh</command> para
execução de comandos específicos em máquinas remotas, isto é possível com os
novos recursos da versão 3 do <command>ssh</command>.  Para fazer isto, siga os
passos <xref linkend="s-ssh-server-rsaauth"/> para gerar um par de chaves
<emphasis>DSA</emphasis> (o par <emphasis>RSA</emphasis> não aceita execução de
comandos específicos) e copiar para <filename>authorized_keys2</filename>.
Após isto, entre no servidor remoto e edite a chave, inserindo o comando que
deverá ser executado antes da linha <emphasis>dds</emphasis>, por exemplo:
</para>
<screen>
command="ls / -la" ssh-dss ABCAB3NzaC5555MAAACBAL3...
</screen>
<para>
Com este método é possível restringir a execução de alguns comandos/serviços
além de outras possibilidades como a mudança de variáveis específicas para o
comando:
</para>
<screen>
no-port-forwarding,no-X11-forwarding,no-agent-forwarding,command="ls / -la" ssh-dss ABCAB3NzaC1kc55355MAADBBYLp...
</screen>
</section>

<section id="s-ssh-server-gatewayssh"><title>Criando um gateway ssh</title>
<para>
Imagine quando você deseja ter acesso a uma máquina de sua rede interna que
esteja atrás de um gateway, isto é possível usando os recursos explicados em
<xref linkend="s-ssh-server-cmdkey"/> fazendo um redirecionamento de acesso
para seu usuário da seguinte forma:
</para>
<screen>
command="ssh -t usuario@maquina.interna" ssh-dss DAK874CKLDSAUE83da9x...
</screen>
<para>
Isto o acesso do usuário ser redirecionado automaticamente quando efetuar o
logon.  Caso tenha definido uma senha para a chave DSA, o usuário deverá
fornecer a senha para entrar no gateway e outra para acessar sua estação de
trabalho.
</para>
<para>
<emphasis role="strong">OBS:</emphasis> Não estou levando em conta as
considerações de segurança que este exemplo tem em sua rede, bem como o que
pode ou não ser redirecionado.  A intenção foi manter a simplicidade para
entender sem dificuldades como isto é feito.
</para>
</section>

<section id="s-ssh-server-proxy"><title>Criando um tunel proxy</title>
<para>
Aplicações remotas podem ser abertas localmente com o uso desta técnica.  Você
poderá usar para acessar portas que estariam disponíveis somente através do
endereço remoto, realizar conexões criptografadas ou com compactação
(garantindo uma boa taxa de transferência para protocolos que usem mais texto).
</para>
<para>
Por exemplo, para redirecionar o tráfego da porta 80 do servidor remoto para a
porta 2003 local:
</para>
<screen>
ssh -l seu_login servidor -L2003:servidor_remoto:80 -f sleep 60
</screen>
<para>
O <literal>sleep 60</literal> tem a função de apenas deixar o tunel aberto por
60 segundos, tempo suficiente para realizarmos nossa conexão.  Agora, entre no
seu navegador local e acesse a porta <emphasis>2003</emphasis>:
</para>
<screen>
http://localhost:2003
</screen>
<para>
A opção <emphasis>-C</emphasis> também pode ser especificada junto ao
<command>ssh</command> para usar compactação dos dados da conexão.  Como notou,
este recurso também é útil para fazer a administração remota de máquinas,
porque o que está realizando a conexão será o IP do servidor remoto, não o seu.
Da mesma forma, você poderá ter problemas caso não tenha uma boa política de
distribuição de contas de máquinas em sua rede.  Veja <xref
linkend="d-contas"/> para detalhes .
</para>
</section>

<section id="s-ssh-server-protodiff"><title>Diferenças nas versões do protocolo</title>
<para>
Retirada da página de manual do <command>sshd</command>:
</para>
<variablelist>
<varlistentry>
<term>Protocolo SSH versão 1</term>
<listitem>
<para>
Cada servidor possui uma chave RSA específica (1024 bits por padrão) usada para
identifica-lo.  Quando o sshd inicia, ele gera uma chave RSA do servidor (768
bits por padrão, valor definido por ServerKeyBits) que é recriada a cada hora
(modificado por KeyRegenerationInterval no <filename>sshd_config</filename>) e
permanece sempre residente na RAM.
</para>
<para>
Quando um cliente se conecta o sshd responde com sua chave pública da máquina e
chaves do servidor.  O cliente ssh compara a chave RSA com seu banco de dados
(em <filename>~/.ssh/know_hosts</filename>) para verificar se não foi
modificada.
</para>
<para>
Estando tudo OK, o cliente gera um número aleatório de 256 bits, o encripta
usando ambas as chaves de máquina e chave do servidor e envia este número ao
servidor.  Ambos os lados então usam este número aleatório como chave de seção
que é usado para encriptar todas as comunicações seguintes na seção.
</para>
<para>
O resto da seção usa um método de embaralhamento de dados convencional,
atualmente Blowfish ou 3DES (usado como padrão).  O cliente seleciona o
algoritmo de criptografia que será usado de um destes oferecidos pelo servidor.
Após isto o servidor e cliente entram em um diálogo de autenticação.  O cliente
tenta se autenticar usando um dos seguintes métodos de autenticação:
</para>
<itemizedlist>
<listitem>
<para>
<filename>~/.rhosts</filename> ou <filename>~/.shosts</filename> (normalmente
desativada).
</para>
</listitem>
<listitem>
<para>
<filename>~/.rhosts</filename> ou <filename>~/.shosts</filename> combinado com
autenticação RSA (normalmente desativada).
</para>
</listitem>
<listitem>
<para>
Autenticação RSA por resposta de desafio.
</para>
</listitem>
<listitem>
<para>
Autenticação baseada em senha.
</para>
</listitem>
</itemizedlist>
<para>
A autenticação usando Rhosts normalmente é desativada por ser muito insegura
mas pode ser ativada no arquivo de configuração do servidor se realmente
necessário.  A segurança do sistema não é melhorada a não ser que os serviços
<command>rshd</command>, <command>rlogind</command>, <command>rexecd</command>
e <command>rexd</command> estejam desativados (assim, o
<command>rlogin</command> e <command>rsh</command> serão completamente
desativados na máquina).   
</para>
</listitem>
</varlistentry>
<varlistentry>
<term>Protocolo SSH versão 2</term>
<listitem>
<para>
A versão 2 funciona de forma parecida com a 1: Cada máquina possui uma chave
RSA/DSA específica usada para se identificar.  A diferença é que quando o
<command>sshd</command> inicia, ele não gera uma chave de servidor.  A
segurança de redirecionamento é oferecida através da concordância do uso de uma
chave Diffie-Hellman.  Esta concordância de chave resulta em uma seção com
chave compartilhada.  O resto da seção é encriptada usando um algoritmo
simétrico, como Blowfish, 3DES, CAST128, Arcfour, 128 bit AES, ou 256 bit AES.
</para>
<para>
O cliente que seleciona o algoritmo de criptografia que será usado entre os
oferecidos pelo servidor.  A versão 2 também possui integridade de seção feita
através de um código de autenticação de mensagem criptográfica (hmac-sha1 ou
hmac-md5).  A versão 2 do protocolo oferece um método de autenticação baseado
em chave pública (PubkeyAuthentication) e o método de autenticação convencional
usando senhas.
</para>
</listitem>
</varlistentry>
</variablelist>
</section>

<section id="s-ssh-server-sshd-config"><title>Exemplo de <filename>sshd_config</filename> com explicações das diretivas</title>
<para>
Abaixo segue um exemplo deste arquivo que poderá ser adaptado ao seu sistema.
O objetivo é ser ao mesmo tempo útil para sua configuração e didático:
</para>
<screen>
# Modelo personalizado para o guia Foca GNU/Linux baseado na configuração 
# original do FreeBSD. 
# Autor: Gleydson Mazioli da Silva
# Data: 20/09/2001. 

# Porta padrão usada pelo servidor sshd. Múltiplas portas podem ser 
# especificadas separadas por espaços.
Port 22

# Especifica o endereço IP das interfaces de rede que o servidor sshd 
# servirá requisições. Múltiplos endereços podem ser especificados 
# separados por espaços. A opção Port deve vir antes desta opção
ListenAddress 0.0.0.0

# Protocolos aceitos pelo servidor, primeiro será verificado se o cliente é 
# compatível com a versão 2 e depois a versão 1. Caso seja especificado 
# somente a versão 2 e o cliente seja versão 1, a conexão será descartada. 
# Quando não é especificada, o protocolo ssh 1 é usado como padrão.
Protocol 2,1

# As 4 opções abaixo controlam o acesso de usuários/grupos no sistema.
# Por padrão o acesso a todos é garantido (exceto o acesso root se 
# PermitRootLogin for "no"). AllowUsers e AllowGroups definem uma lista 
# de usuários/grupos que poderão ter acesso ao sistema. Os coringas 
# "*" e "?" podem ser especificados. Note que somente NOMES são válidos, 
# UID e GID não podem ser especificados. 
# 
# As diretivas Allow são processadas primeiro e depois Deny. O método que 
# estas diretivas são processadas é idêntico a diretiva 
# "Order mutual-failure" do controle de acesso do Apache: 
# O usuário deverá TER acesso via AllowUsers e AllowGroups e NÃO ser bloqueado
# por DenyUsers e DenyGroups para ter acesso ao sistema. Se uma das diretivas 
# não for especificada, "*" é assumido como padrão. 
# Estas permissões são checadas após a autenticação do usuário, porque 
# dados a ele pelo /etc/passwd e PAM são obtidos após o processo de 
# autenticação. 
#AllowUsers gleydson teste?
#DenyUsers root adm
#AllowGroups users
#DenyGroups root adm bin

# Permite (yes) ou não (no) o login do usuário root
PermitRootLogin no

# Chaves privadas do servidor (as chaves públicas possuem um ".pub" adicionado
# no final do arquivo. 
HostKey /etc/ssh/ssh_host_key
HostKey /etc/ssh/ssh_host_rsa_key
HostKey /etc/ssh/ssh_host_dsa_key

# Tamanho da chave. 768 bits é o padrão
ServerKeyBits 768

# Tempo máximo para login no sistema antes da conexão ser fechada
LoginGraceTime 600

# Tempo para geração de nova chave do servidor (segundos). O padrão é 
# 3600 segundos (1 hora). 
KeyRegenerationInterval 3600

# Ignora os arquivos ~/.rhosts e ~/.shosts
IgnoreRhosts yes

# Ignora (yes) ou não (no) os arquivos ~/.ssh/known_hosts quando for usado 
# para a opção RhostsRSAAuthentication. Se você não confia neste mecanismo 
# ajuste esta opção para yes.
IgnoreUserKnownHosts no

# Checa por permissões de dono dos arquivos e diretório de usuário antes de 
# fazer o login. É muito recomendável para evitar riscos de segurança 
# com arquivos lidos por todos os usuários. 
StrictModes yes

# Permite (yes) ou não (no) o redirecionamento de conexões X11. A segurança 
# do sistema não é aumentada com a desativação desta opção, outros métodos
# de redirecionamento podem ser usados
X11Forwarding yes

# Especifica o número do primeiro display que será usado para o redirecionamento
# X11 do ssh. Por padrão é usado o display 10 como inicial para evitar conflito 
# com display X locais
X11DisplayOffset 10

# Mostra (yes) ou não (no) a mensagem em /etc/motd no login. O padrão é "no".
PrintMotd no

# Mostra (yes) ou não (no) a mensagem de último login do usuário. O padrão é "no".
PrintLastLog no

# Permite (yes) ou não (no) o envio de pacotes keepalive (para verificar se o 
# cliente responde. Isto é bom para fechar conexões que não respondem mas 
# também podem fechar conexões caso não existam rotas para o cliente 
# naquele momento (é um problema temporário). Colocando esta opção como 
# "no" por outro lado pode deixar usuários que não tiveram a oportunidade
# de efetuar o logout do servidor dados como "permanentemente conectados"
# no sistema. Esta opção deve ser ativada/desativada aqui e no programa 
# cliente para funcionar. 
KeepAlive yes

# Facilidade e nível das mensagens do sshd que aparecerão no syslogd
SyslogFacility AUTH
LogLevel INFO

# Especifica se somente a autenticação via arquivos ~/.rhosts e /etc/hosts.equiv é 
# suficiente para entrar no sistema. Não é muito bom usar "yes" aqui.
RhostsAuthentication no

# Mesmo que o acima com o acréscimo que o arquivo /etc/ssh/ssh_known_hosts também 
# é verificado. Também evite usar "yes" aqui.
RhostsRSAAuthentication no

# Especifica se a autenticação via RSA é permitida (só usado na versão 1 do 
# protocolo ssh). Por padrão "yes". 
RSAAuthentication yes

# Permite autenticação usando senhas (serve para ambas as versões 1 e 2 do ssh).
# O padrão é "yes". 
PasswordAuthentication yes

# Se a PasswordAuthentication for usada, permite (yes) ou não (no) login 
# sem senha. O padrão é "no".
PermitEmptyPasswords no

# Ativa senhas s/key ou autenticação PAM NB interativa. Nenhum destes é 
# compilado por padrão junto com o sshd. Leia a página de manual do 
# sshd antes de ativar esta opção em um sistema que usa PAM. 
ChallengeResponseAuthentication no

# Verifica se o usuário possui emails ao entrar no sistema. O padrão é "no".
# Este módulo também pode estar sendo habilitado usando PAM (neste caso 
# cheque a configuração em /etc/pam.d/ssh). 
CheckMail no

# Especifica se o programa login é usado para controlar a seções de shell 
# interativo. O padrão é "no".
UseLogin no

# Especifica o número máximo de conexões de autenticação simultâneas feitas 
# pelo daemon sshd. O valor padrão é 10. Valores aleatórios podem ser 
# especificados usando os campos "inicio:taxa:máximo". Por exemplo, 
# 5:40:15 rejeita até 40% das tentativas de autenticação que excedam o 
# limite de 5 até atingir o limite máximo de 15  conexões, quando 
# nenhuma nova autenticação é permitida.
MaxStartups 10
#MaxStartups 10:30:60

# Mostra uma mensagem antes do nome de usuário/senha
Banner /etc/issue.net

# Especifica se o servidor sshd fará um DNS reverso para verificar se o 
# endereço confere com a origem (isto é útil para bloquear conexões 
# falsificadas - spoofing). O padrão é "no". 
ReverseMappingCheck yes

# Ativa o subsistema de ftp seguro. Para desabilitar comente a linha 
# abaixo
Subsystem	sftp	/usr/lib/sftp-server
</screen>
</section>

</section>

</chapter>

